class Solution
{
public:
    string multiply(string num1, string num2)
    {
        std::vector<unsigned int> digits;
        std::vector<unsigned int> positions;
        ExtractDigitsAndPositions(num1, num2, digits, positions);
        CalculateDigitsToDistinctPositions(digits, positions);
        
        return MakeStringFromDigits(digits, positions);
    }
    
    void ExtractDigitsAndPositions(string num1, string num2, std::vector<unsigned int>& digits, std::vector<unsigned int>& positions )
    {
        unsigned int firstDigit = 0;
        unsigned int secondDigit = 0;
        for(size_t i = 0; i < num1.length(); ++i)
        {
            for(size_t j = 0; j < num2.length(); ++j)
            {
                unsigned int digitProduct = GetCharDecimal(num1[i]) * GetCharDecimal(num2[j]);
                unsigned int position = (num1.length() - i - 1) + (num2.length() - j - 1);
                
                if(digitProduct > 9)
                {
                    firstDigit = 0;
                    secondDigit = 0;
                    
                    DoubleToSingleDigits(digitProduct, firstDigit, secondDigit);
                    digits.push_back(secondDigit);
                    positions.push_back(position);
                    
                    ++position;
                    digits.push_back(firstDigit);
                    positions.push_back(position);
                }
                else
                {
                    digits.push_back(digitProduct);
                    positions.push_back(position);
                }
            }
        }
    }
    
    unsigned int GetCharDecimal(const char singleChar)
    {
        unsigned const int ZeroCharAsDecimal = 48;
        return singleChar - ZeroCharAsDecimal;
    }
    
    void DoubleToSingleDigits(unsigned int input, unsigned int& firstDigit, unsigned int& secondDigit)
    {
        // First digit
        unsigned int tempInput = input;
        for(size_t i = 0; tempInput >= 10; ++i )
        {
            tempInput -= 10;
            ++firstDigit;
        }
        
        // Second digit
        secondDigit = input % 10;
    }
    
    // Adds up all the digits with the same positions until there are only distinct positions left
    void CalculateDigitsToDistinctPositions(std::vector<unsigned int>& digits, std::vector<unsigned int>& positions)
    {
        while(1)
        {       
            int duplicatePositions = -1;
            
            // We are done if there are no duplicate positions
            if(!AreDuplicatePositions(positions, duplicatePositions))
            {
                break;
            }
            
            // Add up all the digits with the same positions
            for(size_t i = 0; i < digits.size(); ++i)
            {
                for(size_t j = 0; j < digits.size(); ++j)
                {
                    if(i == j)
                    {
                        continue;
                    }
                    
                    if(positions[i] == duplicatePositions && positions[j] == duplicatePositions)
                    {
                        digits[i] += digits[j];
                        digits.erase(digits.begin() + j);
                        positions.erase(positions.begin() + j);
                        if( j <= i)
                        {
                            --i;
                        }
                        if(digits[i] > 9)
                        {
                            unsigned int firstDigit = 0;
                            unsigned int secondDigit = 0;
                            DoubleToSingleDigits(digits[i], firstDigit, secondDigit);
                                                      
                            digits.push_back(secondDigit);
                            positions.push_back(positions[i]);
                                
                            digits.push_back(firstDigit);
                            positions.push_back(positions[i] + 1);
                            
                            digits.erase(digits.begin() + i);
                            positions.erase(positions.begin() + i);
                        }
                    }   
                }
            }
        }
    }
    
    bool AreDuplicatePositions(std::vector<unsigned int> positions, int& duplicatePositions)
    {
        duplicatePositions = -1;
        for(size_t i = 0; i < positions.size(); ++i)
        {
            for(size_t j = 0; j < positions.size(); ++j)
            {
                if(i == j)
                {
                    continue;
                }
                
                if(positions[i] == positions[j])
                {
                    duplicatePositions = positions[i];
                    return true;
                }
            }
        }
        
        return false;
    }
    
    std::string MakeStringFromDigits(std::vector<unsigned int> digits, std::vector<unsigned int> positions)
    {
        std::string returnValue;
        for(int i = digits.size() - 1; i >= 0; --i)
        {
            for(int j = 0; j < digits.size(); ++j)
            {
                if (positions[j] == i)
                {
                    returnValue.append(std::to_string(digits[j]));
                    break;
                }
            }
        }
        
        return returnValue;
    }
};
